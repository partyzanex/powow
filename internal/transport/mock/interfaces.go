// Code generated by MockGen. DO NOT EDIT.
// Source: internal/transport/interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	net "net"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/partyzanex/powow/pkg/proto"
)

// MockConn is a mock of Conn interface.
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
}

// MockConnMockRecorder is the mock recorder for MockConn.
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance.
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConn)(nil).Close))
}

// LocalAddr mocks base method.
func (m *MockConn) LocalAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// LocalAddr indicates an expected call of LocalAddr.
func (mr *MockConnMockRecorder) LocalAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddr", reflect.TypeOf((*MockConn)(nil).LocalAddr))
}

// Read mocks base method.
func (m *MockConn) Read(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockConnMockRecorder) Read(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockConn)(nil).Read), b)
}

// RemoteAddr mocks base method.
func (m *MockConn) RemoteAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr.
func (mr *MockConnMockRecorder) RemoteAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockConn)(nil).RemoteAddr))
}

// SetDeadline mocks base method.
func (m *MockConn) SetDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeadline indicates an expected call of SetDeadline.
func (mr *MockConnMockRecorder) SetDeadline(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadline", reflect.TypeOf((*MockConn)(nil).SetDeadline), t)
}

// SetReadDeadline mocks base method.
func (m *MockConn) SetReadDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadDeadline indicates an expected call of SetReadDeadline.
func (mr *MockConnMockRecorder) SetReadDeadline(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadDeadline", reflect.TypeOf((*MockConn)(nil).SetReadDeadline), t)
}

// SetWriteDeadline mocks base method.
func (m *MockConn) SetWriteDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWriteDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline.
func (mr *MockConnMockRecorder) SetWriteDeadline(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockConn)(nil).SetWriteDeadline), t)
}

// Write mocks base method.
func (m *MockConn) Write(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockConnMockRecorder) Write(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockConn)(nil).Write), b)
}

// MockChallengeProvider is a mock of ChallengeProvider interface.
type MockChallengeProvider struct {
	ctrl     *gomock.Controller
	recorder *MockChallengeProviderMockRecorder
}

// MockChallengeProviderMockRecorder is the mock recorder for MockChallengeProvider.
type MockChallengeProviderMockRecorder struct {
	mock *MockChallengeProvider
}

// NewMockChallengeProvider creates a new mock instance.
func NewMockChallengeProvider(ctrl *gomock.Controller) *MockChallengeProvider {
	mock := &MockChallengeProvider{ctrl: ctrl}
	mock.recorder = &MockChallengeProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChallengeProvider) EXPECT() *MockChallengeProviderMockRecorder {
	return m.recorder
}

// CreateTaskRequest mocks base method.
func (m *MockChallengeProvider) CreateTaskRequest() (*proto.TaskRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTaskRequest")
	ret0, _ := ret[0].(*proto.TaskRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTaskRequest indicates an expected call of CreateTaskRequest.
func (mr *MockChallengeProviderMockRecorder) CreateTaskRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTaskRequest", reflect.TypeOf((*MockChallengeProvider)(nil).CreateTaskRequest))
}

// GetDeadline mocks base method.
func (m *MockChallengeProvider) GetDeadline() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeadline")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetDeadline indicates an expected call of GetDeadline.
func (mr *MockChallengeProviderMockRecorder) GetDeadline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeadline", reflect.TypeOf((*MockChallengeProvider)(nil).GetDeadline))
}

// VerifyTaskResult mocks base method.
func (m *MockChallengeProvider) VerifyTaskResult(id proto.ID, result *proto.TaskResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyTaskResult", id, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyTaskResult indicates an expected call of VerifyTaskResult.
func (mr *MockChallengeProviderMockRecorder) VerifyTaskResult(id, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyTaskResult", reflect.TypeOf((*MockChallengeProvider)(nil).VerifyTaskResult), id, result)
}

// MockQuoteService is a mock of QuoteService interface.
type MockQuoteService struct {
	ctrl     *gomock.Controller
	recorder *MockQuoteServiceMockRecorder
}

// MockQuoteServiceMockRecorder is the mock recorder for MockQuoteService.
type MockQuoteServiceMockRecorder struct {
	mock *MockQuoteService
}

// NewMockQuoteService creates a new mock instance.
func NewMockQuoteService(ctrl *gomock.Controller) *MockQuoteService {
	mock := &MockQuoteService{ctrl: ctrl}
	mock.recorder = &MockQuoteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuoteService) EXPECT() *MockQuoteServiceMockRecorder {
	return m.recorder
}

// GetRandom mocks base method.
func (m *MockQuoteService) GetRandom(ctx context.Context) (*proto.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandom", ctx)
	ret0, _ := ret[0].(*proto.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandom indicates an expected call of GetRandom.
func (mr *MockQuoteServiceMockRecorder) GetRandom(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandom", reflect.TypeOf((*MockQuoteService)(nil).GetRandom), ctx)
}
